image: docker:20
services:
  - name: docker:dind

workflow:
  rules:
    - if: $CI_COMMIT_REF_NAME == "main"
      variables:
        AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY_DEV}
        AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID_DEV}
        AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION_DEV}
        ENVIRONMENT_NAME: dev
        S3_BUCKET_NAME: ${S3_BUCKET_NAME_DEV}
        CDN_DISTRIBUTION: ${CDN_DISTRIBUTION_DEV}
    # - if: $CI_COMMIT_REF_NAME =~ /release/
    #   variables:
    #     ENVIRONMENT_NAME: staging
    #     S3_BUCKET_NAME: ${S3_BUCKET_NAME_STAGING}
    - when: always

stages:
  - build
  - test
  - deploy
  - release

npm:
  image: node:16-slim
  environment:
    name: $ENVIRONMENT_NAME
  stage: build
  cache:
    key: ${CI_COMMIT_REF_SLUG}-npm
    paths:
      - node_modules/
  script:
    - npm install
  artifacts:
    # expire_in: 1 month
    paths:
      - node_modules/

.deployment_template: &deployment
  image: adranetwork/gitlab-build
  stage: deploy
  environment:
    name: $ENVIRONMENT_NAME
  before_script:
    - npm install -g env-cmd
  script:
    - echo exporting the following as tag  ${CI_COMMIT_REF_SLUG} | sed 's/.*-//'
    - export TAG="$(echo ${CI_COMMIT_REF_SLUG} | sed 's/.*-//')"
    - npx env-cmd --file .env.${ENVIRONMENT_NAME} npm run generate
    - aws s3 sync --cache-control 'max-age=604800' --exclude index.html dist/ s3://${S3_BUCKET_NAME}/
    - aws s3 sync --cache-control 'no-cache' dist/ s3://${S3_BUCKET_NAME}/
    - aws configure set preview.cloudfront true
    - aws cloudfront create-invalidation --distribution-id ${CDN_DISTRIBUTION} --paths "/"

deployment_job:
  <<: *deployment

deployment_production:
  <<: *deployment
  rules:
    - if: $CI_COMMIT_REF_NAME =~ /release/
      variables:
        AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID_PRODUCTION}
        AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY_PRODUCTION}
        AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION_PRODUCTION}
        ENVIRONMENT_NAME: production
        S3_BUCKET_NAME: ${S3_BUCKET_NAME_PRODUCTION}
        CDN_DISTRIBUTION: ${CDN_DISTRIBUTION_PRODUCTION}
      when: manual

# release_job:
#   rules:
#     - if: $ENVIRONMENT_NAME == "staging"
#   stage: release
#   image: registry.gitlab.com/gitlab-org/release-cli:latest

#   script:
#     - echo exporting the following as tag  ${CI_COMMIT_REF_SLUG} | sed 's/.*-//'
#     - export TAG="$(echo ${CI_COMMIT_REF_SLUG} | sed 's/.*-//')"
#     - echo "running release_job for $TAG"
#   release:
#     name: 'Release $TAG'
#     description: 'Created using the release-cli'
#     tag_name: '$TAG' # variables must be defined elsewhere
#     ref: '$CI_COMMIT_SHA' # in the pipeline. For example, in the
